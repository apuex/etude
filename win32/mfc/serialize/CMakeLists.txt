CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(serialize)

EXECUTE_PROCESS( COMMAND uname -s COMMAND tr -d '\n' OUTPUT_VARIABLE OSNAME )
EXECUTE_PROCESS( COMMAND uname -m COMMAND tr -d '\n' OUTPUT_VARIABLE OSARCH )

SET(CMAKE_CXX_STANDARD 14)

if(MSVC)
  SET(CMAKE_CXX_FLAGS "/bigobj /EHsc")
else()
if(${OSNAME} MATCHES "CYGWIN*")
    MESSAGE(STATUS, "${OSNAME} ${OSARCH}")
    SET(CMAKE_CXX_FLAGS "-Wall -fPIC -Wa,-mbig-obj")
  elseif(${OSNAME} MATCHES "Linux")
    SET(CMAKE_CXX_FLAGS "-Wall")
  elseif(${OSNAME} MATCHES "WIN32")
  endif()
endif()

INCLUDE_DIRECTORIES(include 
  ${INCLUDE_DIRECTORIES}
)

LINK_DIRECTORIES(
  ${LINK_DIRECTORIES} 
  ${LIBRARY_OUTPUT_PATH}
)

INCLUDE_DIRECTORIES(
  include
)

SET(SERIALIZE_SRCS 
  include/Serialize.h
  include/Person.h
  person/Person.cpp
)

SET(PERSON_SRCS 
  include/Person.h
  person/Person.cpp
  person/main.cpp
)

ADD_LIBRARY(serialize SHARED ${SERIALIZE_SRCS})
ADD_EXECUTABLE(person ${PERSON_SRCS})

INSTALL(TARGETS serialize person
    CONFIGURATIONS Release
    RUNTIME DESTINATION bin PERMISSIONS WORLD_EXECUTE
    LIBRARY DESTINATION lib PERMISSIONS WORLD_EXECUTE
    ARCHIVE DESTINATION lib)
INSTALL(TARGETS serialize person
    CONFIGURATIONS Debug
    RUNTIME DESTINATION bin PERMISSIONS WORLD_EXECUTE
    LIBRARY DESTINATION lib PERMISSIONS WORLD_EXECUTE
    ARCHIVE DESTINATION lib)
INSTALL(FILES include/Serialize.h include/Person.h DESTINATION include
    CONFIGURATIONS Release)

if(MSVC)
  TARGET_COMPILE_DEFINITIONS(serialize PRIVATE _WINDLL)
  TARGET_COMPILE_DEFINITIONS(serialize PRIVATE REALDATAAPI_EXPORT)
  TARGET_COMPILE_DEFINITIONS(serialize PRIVATE _UNICODE)
else()
  TARGET_LINK_LIBRARIES(serialize stdc++ m pthread)
endif()

